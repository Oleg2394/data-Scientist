#!/usr/bin/env python
# coding: utf-8

# ### Урок 3.4 `Ndarray`: операции

# In[1]:


import numpy as np


# Чем же удобны массивы? Во-первых, они занимают меньше места и памяти. Во-вторых, с ними очень удобно работать: все операции над массивами будут производиться поэлементно: то есть, для выполнения действий над каждым элементом массива, нам не придется использовать какие-то специальные конструкции вроде циклов, мы сможем обращаться сразу ко всему массиву. Например, давайте представим, что у нас есть массив со значениями явки на выборы в долях, а мы хотим получить результаты в процентах (домноженные на 100).

# In[2]:


turnout = np.array([0.62, 0.43, 0.79, 0.56])
turnout


# Чтобы домножить каждое число в массиве на 100, нам достаточно домножить на 100 `turnout`:

# In[3]:


turnout * 100  # готово!


# Точно так же можно производить операции с несколькими массивами. Представим теперь, что есть два студента, которые подрабатывают репетиторами по математике, и у нас есть два массива, которые содержат их ежедневный доход за рабочую неделю (пять рабочих дней):

# In[4]:


week1 = np.array([4000, 0, 2000, 0, 1200]) # 5 рабочих дней
week2 = np.array([1000, 2000, 0, 0, 3500]) 


# Какой день можно считать более «продуктивным» в плане дохода, если рассматривать общий доход этих студентов? Сложим два массива и посмотрим:

# In[5]:


week1 + week2  # видимо, понедельник


# Мы могли бы также посчитать средний доход студентов по каждому дню:

# In[6]:


(week1 + week2) / 2


# Со стандартными структурами данных в Python, например, со списками, так поступить не получилось бы. Для иллюстрации попробуем взять маленький список из двух чисел и возвести его элементы в квадрат:

# In[7]:


[2, 3] ** 2 


# Ничего не получилось, и это ожидаемо: при работе с обычными списками пришлось бы использовать циклы или списковые включения (*list comprehensions*), чтобы обращаться к каждому элементу по отдельности и производить с ним операции. Как легко догадаться, даже если вы незнакомы с этими конструкциями, такой подход менее удобен и занимает больше времени. Поэтому при работе с данными, в частности, в машинном обучении, чаще используют массивы `NumPy`. Сравните:

# In[8]:


np.array([2, 3]) ** 2 


# И в следующем уроке мы поговорим об операциях над массивами более подробно.
