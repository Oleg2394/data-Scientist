#!/usr/bin/env python
# coding: utf-8

# ### Урок 3.5 – Вычисления с массивами

# In[1]:


import numpy as np


# Для начала создадим простой одномерный массив. Пусть это будет массив, содержащий оценки группы школьников:

# In[2]:


marks = np.array([5, 4, 3, 5, 5, 4, 3, 4]) 
marks


# Найдем самую плохую, минимальную оценку:

# In[3]:


marks.min()


# А теперь самую высокую, максимальную:

# In[4]:


marks.max()


# И средний балл:

# In[5]:


marks.mean()


# А теперь найдем номер ученика с самой высокой оценкой:

# In[6]:


marks.argmax()


# И номер ученика с самой низкой оценкой:

# In[7]:


marks.argmin()


# **Внимание:** если таких несколько, будет выведено первое совпадение, как для `argmin()`, так и для`argmax()`.

# Конечно, мы не сможем сейчас рассмотреть все доступные методы, относящиеся к массивам (некоторые часто используемые методы мы еще будем обсуждать в следующем модуле), но при желании на перечень доступных методов можно посмотреть, набрав название массива, поставив точку и нажав на *Tab* (показать).

# Теперь посмотрим на многомерный массив, для удобства возьмём двумерный:

# In[8]:


grades = np.array([[3, 5, 5, 4, 3], 
          [3, 3, 4, 3, 3], 
          [5, 5, 5, 4, 5]])


# Пусть это будут оценки учеников трёх маленьких групп за 5 контрольных работ. Попробуем теперь найти средний балл по каждой группе. Для этого необходимо указать, по какому измерению мы будем двигаться (грубо говоря, по строкам или столбцам):

# In[9]:


grades.mean(axis = 1) # по строкам, три оценки - одна для каждой группы


# А теперь найдем средний балл по каждой контрольной работе:

# In[10]:


grades.mean(axis = 0) # по столбцам, пять оценки - одна для каждой работы


# Таким же образом можно было посмотреть на минимальное и максимальное значение (можете потренироваться самостоятельно).

# ### Создание массивов
# 
# #### Как создать массив?
# 
# **Способ 1**
# 
# С первым способом мы уже отчасти познакомились: можно получить массив из готового списка, воспользовавшись функцией `array()`:

# In[8]:


np.array([10.5, 45, 2.4])


# **Способ 2**
# 
# Можно создать массив на основе промежутка, созданного с помощью `arange()` – функции `numpy`, похожей на стандартный `range()`, только более гибкую. Посмотрим, как работает эта функция.

# In[9]:


np.arange(2, 9) # по умолчанию шаг равен 1, как обычный range()


# По умолчанию эта функция создает массив, элементы которого начинаются со значения 2 и заканчиваются на значении 8 (правый конец промежутка не включается), следуя друг за другом с шагом 1. Но этот шаг можно менять:

# In[10]:


np.arange(2, 9, 3) # с шагом 3


# И даже делать дробным!

# In[11]:


np.arange(2, 9, 0.5)


# **Способ 3**
# 
# Еще массив можно создать совсем с нуля. Единственное, что нужно четко представлять – это его размерность, его форму, то есть опять же, число строк и столбцов. Библиотека `numpy` позволяет создать массивы, состоящие из нулей или единиц, а также  «пустые» массивы (на практике используются редко). Удобство заключается в том, что сначала можно создать массив, инициализировать его (например, заполнить нулями), а затем заменить нули на другие значения в соответствии с требуемыми условиями.
# 
# Так выглядит массив из нулей:

# In[12]:


Z = np.zeros((3, 3)) # размеры в виде кортежа - не теряйте еще одни круглые скобки
Z


# А так – массив из единиц:

# In[13]:


O = np.ones((4, 2))
O


# А так выглядит единичная матрица – таблица из 0 и 1, в которой число строк и столбцов одинаково, и где на главной диагонали стоят 1:

# In[14]:


E = np.eye(5)
E


# Про замену элементов в массивах (в том числе по некоторым условиям) пока говорить не будем, обсудим это в следующем модуле, а вот сами условия разберем уже в следующем уроке.
